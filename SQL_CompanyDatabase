-- The following is a set of practices for querieing in MySQL
-- 1. Create the database and the tables

create table employee (
    emp_id int primary key,
    first_name varchar(40),
    last_name varchar(40),
    birth_day date,
    sex varchar(1),
    salary int,
    super_id int,
    branch_id int
);

select * from employee;

create table branch (
    branch_id int primary key,
    branch_name varchar(40),
    mgr_id int,
    mgr_start_date date,
    foreign key(mgr_id) references employee(emp_id) on delete set null
);

alter table employee 
add foreign key(branch_id)
references branch(branch_id)
on delete set null;

alter table employee 
add foreign key(super_id)
references employee(emp_id)
on delete set null;

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

select * from client;

create table works_with(
    emp_id int,
    client_id int,
    total_sales int,
    primary key(emp_id, client_id),
    foreign key(emp_id) references employee(emp_id) on delete cascade,
    foreign key(client_id) references client(client_id) on delete cascade
);

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

-- 2. Insert data into the db/tables

-- Corporate
insert into employee values(100, 'David', 'Wallace', '1967-11-17','M', 250000, NULL, NULL);
insert into branch values(1, 'Corporate', 100, '2006-02-09');

update employee 
set branch_id = 1
where emp_id = 100;

insert into employee values (101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1); 

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

-- 3. Basic queries

select * from branch;

-- find all employees
select * from employee;

-- find all employees ordered by salary
select * from employee
order by salary desc;

-- find all employees ordered by sex then name
select * from employee
order by sex, first_name, last_name;

-- find the first 5 employees in the table
select * from employee
limit 5;

-- find first and last names of all employees
select first_name as forename, last_name as surname from employee;

-- find out all the different genders
select distinct sex from employee;

-- 4. Basic functions

-- find the number of employees
select count(emp_id) from employee;

-- find the number of employees that have supervisors
select count(super_id) from employee;

-- find the number of female employees born after 1970
select count(emp_id) from employee
where sex = 'F' and birth_day > '1971-01-01';

-- find the average of all employees' salaries
select avg(salary) from employee;

-- find the average of all male employees' salaries
select avg(salary) from employee
where sex = 'M';

-- find the sum of all employees' salaries
select sum(salary) from employee;

-- 4.1. aggregration

-- find out how many males and females there are
select count(sex), sex from employee
group by sex;

-- find the total sales of each salesman
select sum(total_sales), emp_id from works_with
group by emp_id;

-- find the total sales from each client
select sum(total_sales), client_id from works_with
group by client_id;

-- 5. Wildcards
-- % = any # characters
-- _ = one character

-- find any clients who are an LLC
select * from client
where client_name like '%LLC';

-- find any branch suppliers who are in the label business
select * from branch_supplier
where supplier_name like '% label%';

-- find any employee born in October
select * from employee 
where birth_day like '____-10%';

-- find any clients who are schools
select * from client
where client_name like '%school%';

-- 6. Union

-- find a list of employees and branch names
SELECT first_name as Company_Names
FROM employee
UNION
SELECT branch.branch_name
FROM branch
union
select client_name from client;

-- find a list of all clients and branch suppliers' names
select client_name, client.branch_id from client
union
select supplier_name, branch_supplier.branch_id from branch_supplier;

-- find a list of all money spent or earned by the company
select salary from employee
union
select total_sales from works_with;

-- 7. Joins

insert into branch values(4, 'Buffalo', null, null);
select * from branch;

-- find all branches and names of their managers
select employee.emp_id, employee.first_name, branch.branch_name 
from employee
join branch
on employee.emp_id = branch.mgr_id;

-- using left join
-- all records from the left table (employee table) get included as well
-- so there will be 9 records instead of 3
select employee.emp_id, employee.first_name, branch.branch_name 
from employee
left join branch
on employee.emp_id = branch.mgr_id;

-- using right join
-- all records from the right table (branch table) get included as well
-- so there will be 4 records instead of 3
select employee.emp_id, employee.first_name, branch.branch_name 
from employee
right join branch
on employee.emp_id = branch.mgr_id;

-- 8. Nested queries

-- Find names of all employees who have sold over 30,000 to a single client

-- if using join
select employee.first_name, works_with.emp_id, works_with.total_sales
from  employee
join works_with
where works_with.total_sales > 30000;

-- if using nested query:
select employee.first_name, employee.last_name
from employee
where employee.emp_id in (
  select works_with.emp_id
  from works_with
  where works_with.total_sales > 30000
);

-- find all clients who are handled by the branch that Michael Scott manages. Assume you know Michael's ID.

select client.client_name from client
where client.branch_id = (
  select branch.branch_id from branch
  where branch.mgr_id = 102
  limit 1
);

-- 9. On Delete

-- set null: do not delete the row, only sets the missing data to null
-- we can only set null for columns that are not primary key
delete from employee where emp_id = 102;
select * from branch;
select * from employee;

-- cascade: delete the entire row in db
-- we must use cascade for primary key columns on delete
delete from branch where branch_id = 2;
select * from branch_supplier;

-- 10. Triggers

-- here we need to use the MySQL command line
create table trigger_test (
  message varchar(100)
);

delimiter $$
create   trigger my_trigger before INSERT   on employee   for each row begin     insert into trigger_test values('added new employee');   end$$
delimiter;

INSERT INTO employee 
values(109, 'Oscar', 'Martinez', '1968-02-19', 'M', 69000, 106, 3);

select * from trigger_test;

DELIMITER $$
CREATE     TRIGGER my_trigger1 BEFORE INSERT    ON employee    FOR EACH ROW BEGIN        INSERT INTO trigger_test VALUES(NEW.first_name);    END$$
DELIMITER ;

INSERT INTO employee
VALUES(110, 'Kevin', 'Malone', '1978-02-19', 'M', 69000, 106, 3);


-- conditional trigger

DELIMITER $$
CREATE    TRIGGER my_trigger2 BEFORE INSERT    ON employee    FOR EACH ROW BEGIN         IF NEW.sex = 'M' THEN       INSERT INTO trigger_test VALUES('added male employee'); ELSEIF NEW.sex = 'F' THEN     INSERT INTO trigger_test VALUES('added female');   ELSE     INSERT INTO trigger_test VALUES('added other employee');      END IF;    END$$
DELIMITER ;

INSERT INTO employee
VALUES(111, 'Pam', 'Beesly', '1988-02-19', 'F', 69000, 106, 3);
